vec4 calcDiffusedLight(BaseLight baseLight, vec3 direction, vec3 normal)
{
    float diffuseFactor = dot(normal, -direction);

    vec4 diffuseColor = vec4(0, 0, 0, 0);

    if(diffuseFactor > 0)
    {
        diffuseColor = vec4(baseLight.color, 1.0) * baseLight.intensity * diffuseFactor;
    }

    return diffuseColor;
}

vec4 calcDiffusedDirectionalLight(DirectionalLight directionalLight, vec3 normal)
{
    return calcDiffusedLight(directionalLight.base, -directionalLight.direction, normal);
}

vec4 calcDiffusedPointLight(PointLight pointLight, vec3 normal)
{
    vec3 lightDirection = worldPosition - pointLight.position;
    float distanceToPoint = length(lightDirection);

    if(distanceToPoint > pointLight.range)
    return vec4(0, 0, 0, 0);

    lightDirection = normalize(lightDirection);

    vec4 color = calcDiffusedLight(pointLight.base, lightDirection, normal);

    float attenuation = pointLight.attenuation.constant +
    pointLight.attenuation.linear * distanceToPoint +
    pointLight.attenuation.exponent * distanceToPoint * distanceToPoint + 0.0001;

    return color / attenuation;
}

vec4 calcDiffusedSpotLight(SpotLight spotLight, vec3 normal)
{
    vec3  lightDirection = normalize(worldPosition - spotLight.pointLight.position);
    float spotFactor     = dot(lightDirection, spotLight.direction);

    vec4 color = vec4(0, 0, 0, 1);

    if(spotFactor > spotLight.cutoff)
    {
        color = calcDiffusedPointLight(spotLight.pointLight, normal) *
        (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
    }

    return max(color, 0.0);
}