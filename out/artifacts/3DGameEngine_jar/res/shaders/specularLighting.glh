vec4 calcSpecularLight(BaseLight baseLight, vec3 direction, vec3 normal)
{
    vec4 specularColor = vec4(0, 0, 0, 0);

    vec3 directionToEye = normalize(eyePosition - worldPosition);
    vec3 reflectedDirection = normalize(reflect(direction, normal));

    float specularFactor = dot(directionToEye, reflectedDirection);
    specularFactor = pow(specularFactor, damping);

    if(specularFactor > 0)
    {
        specularColor = vec4(baseLight.color, 1.0) * reflectivity * specularFactor * baseLight.intensity;
    }

    return specularColor;
}

vec4 calcSpecularDirectionalLight(DirectionalLight directionalLight, vec3 normal)
{
    return calcSpecularLight(directionalLight.base, -directionalLight.direction, normal);
}

vec4 calcSpecularPointLight(PointLight pointLight, vec3 normal)
{
    vec3 lightDirection = worldPosition - pointLight.position;
    float distanceToPoint = length(lightDirection);

    if(distanceToPoint > pointLight.range)
    return vec4(0, 0, 0, 0);

    lightDirection = normalize(lightDirection);

    vec4 color = calcSpecularLight(pointLight.base, lightDirection, normal);

    float attenuation = pointLight.attenuation.constant +
    pointLight.attenuation.linear * distanceToPoint +
    pointLight.attenuation.exponent * distanceToPoint * distanceToPoint + 0.0001;

    return color / attenuation;
}

vec4 calcSpecularSpotLight(SpotLight spotLight, vec3 normal)
{
    vec3  lightDirection = normalize(worldPosition - spotLight.pointLight.position);
    float spotFactor     = dot(lightDirection, spotLight.direction);

    vec4 color = vec4(0, 0, 0, 1);

    if(spotFactor > spotLight.cutoff)
    {
        color = calcSpecularPointLight(spotLight.pointLight, normal) *
        (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
    }

    return max(color, 0.0);
}