

uniform float reflectivity;
uniform float damping;

struct BaseLight
{
    vec3  color;
    float intensity;
};

struct DirectionalLight
{
    BaseLight base;
    vec3      direction;
};

struct Attenuation
{
    float constant;
    float linear;
    float exponent;
};

struct PointLight
{
    BaseLight   base;
    Attenuation attenuation;
    vec3        position;
    float       range;
};

struct SpotLight
{
    PointLight pointLight;
    vec3       direction;
    float      cutoff;
};


#include "diffusedLighting.glh"
#include "specularLighting.glh"

vec4 calcLight(BaseLight baseLight, vec3 direction, vec3 normal)
{
    vec4 diffuseColor = calcDiffusedLight(baseLight, direction, normal);
    vec4 specularColor = calcSpecularLight(baseLight, direction, normal);

    vec4 result = diffuseColor + specularColor;

    return result;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal)
{
    return calcLight(directionalLight.base, -directionalLight.direction, normal);
}

vec4 calcPointLight(PointLight pointLight, vec3 normal)
{
    vec3 lightDirection = worldPosition - pointLight.position;
    float distanceToPoint = length(lightDirection);

    if(distanceToPoint > pointLight.range)
    return vec4(0, 0, 0, 0);

    lightDirection = normalize(lightDirection);

    vec4 color = calcLight(pointLight.base, lightDirection, normal);

    float attenuation = pointLight.attenuation.constant +
    pointLight.attenuation.linear * distanceToPoint +
    pointLight.attenuation.exponent * distanceToPoint * distanceToPoint + 0.0001;

    return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal)
{
    vec3  lightDirection = normalize(worldPosition - spotLight.pointLight.position);
    float spotFactor     = dot(lightDirection, spotLight.direction);

    vec4 color = vec4(0, 0, 0, 1);

    if(spotFactor > spotLight.cutoff)
    {
        color = calcPointLight(spotLight.pointLight, normal) *
        (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
    }

    return max(color, 0.0);
}